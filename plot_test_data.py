#! /usr/bin/env python3

"""
    This is a tester script to visualise the output of
    the Data class in Helpers.py.
    The line is the x and y generated by linear_regress().
    The dots are x plotted against y passed through add_variance()

    Note that the line will not necessarily be the best fit;
    it is not generated from the points (by OLS or similar),
    but is the generated by Data, and the dot plots are
    then randomly offset.
"""

import numpy as np
from Helpers import Data
from matplotlib import pyplot as plt

## Regression: Figure 1
"""
    This plots a random line generated by Helpers.py
    and a range of points arround the line. It is not
    a OLS regression line, but shows that OLS could 
    be used with this data.
"""
# Get regression dataset from Helpers.py
d = Data(15)
x, y = d.linear_regres()
yvar = d.add_variance(y)

# Plot regression points
plt.figure(1)  # Some indentifying integer for the fig.
plt.scatter(x, yvar)
plt.plot(x, y, 'r')

# Make regression labels
plt.title('Test Plot with Variance')
plt.xlabel('x values')
plt.ylabel('y values')


## Categorisation: Figure 2
"""
    This generates random points in 2 categories/colours.
    The categories can be separated by a straight line.
    This shows that the data could be used for categorisation
"""
# Get category dataset from Helpers.py
c = Data(15)
x1, xline, y = c.linear_categ()
x2 = c.add_variance(xline)
x2 = c.add_variance(x2)
x2 = c.add_variance(x2)


# Plot category points
y = np.where(y == 0, 'r', 'b')  # Colour points according to category
plt.figure(2)  # Different indentifying integer for the fig.
plt.scatter(x1, x2, color=y)

# Make category labels
plt.title('Test Plot with Categorisation')
plt.xlabel('x1 values')
plt.ylabel('x2 values')

plt.show()
